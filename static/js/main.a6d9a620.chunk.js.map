{"version":3,"sources":["components/TodoForm.js","components/Todo.js","App.js","index.js"],"names":["TodoForm","props","className","type","placeholder","value","todoInput","onChange","todoInputChangeHandler","ref","todoInputRef","onClick","addTodoHandler","changeFilterStatusHandler","Todo","useState","editing","setEditing","todo","content","editingText","setEditingText","editTextRef","useRef","useEffect","current","focus","todos","filterStatus","e","target","setTodos","map","id","filter","checked","completed","App","setTodoInput","setFilterStatus","filteredTodos","setFilteredTodos","getFromLocal","saveToLocal","filterTodos","console","log","localStorage","setItem","JSON","stringify","getItem","parse","preventDefault","prevTodos","Date","getTime","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6d9a620.chunk.js","sourcesContent":["function TodoForm(props) {\r\n  return (\r\n    <form className=\"todo-form\">\r\n      <input\r\n        className=\"todo-input\"\r\n        type=\"text\"\r\n        placeholder=\"Add todo\"\r\n        value={props.todoInput}\r\n        onChange={props.todoInputChangeHandler}\r\n        ref={props.todoInputRef}\r\n      />\r\n      <button className=\"todo-add\" onClick={props.addTodoHandler}>\r\n        Add\r\n      </button>\r\n      <select\r\n        className=\"todos-filter\"\r\n        onChange={props.changeFilterStatusHandler}\r\n      >\r\n        <option value=\"all\">All</option>\r\n        <option value=\"completed\">Completed</option>\r\n        <option value=\"uncompleted\">Uncompleted</option>\r\n      </select>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { RiCheckLine, RiDeleteBinLine, RiEdit2Line } from \"react-icons/ri\";\r\n\r\nfunction Todo(props) {\r\n  const [editing, setEditing] = useState(false);\r\n  const [editingText, setEditingText] = useState(props.todo.content);\r\n\r\n  const editTextRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (editTextRef.current) {\r\n      editTextRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  // If new todo is added or filter status is changed when editing, return the old value\r\n  useEffect(() => {\r\n    setEditing(false);\r\n    setEditingText(props.todo.content);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.todos, props.filterStatus]);\r\n\r\n  const checkHandler = () => {\r\n    props.setTodos(\r\n      props.todos.map((todo) => {\r\n        if (todo.id === props.todo.id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  };\r\n\r\n  const editHandler = () => {\r\n    setEditing(true);\r\n  };\r\n\r\n  const contentOnChangeHandler = (e) => {\r\n    setEditingText(e.target.value);\r\n  };\r\n\r\n  const updateContentHandler = () => {\r\n    props.setTodos(\r\n      props.todos.map((todo) => {\r\n        if (todo.id === props.todo.id) {\r\n          todo.content = editingText;\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n    setEditing(false);\r\n  };\r\n\r\n  const deleteHandler = () => {\r\n    props.setTodos(props.todos.filter((todo) => todo.id !== props.todo.id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {editing ? (\r\n        <li className=\"todo-edit\">\r\n          <input\r\n            className=\"todo-edit__content\"\r\n            type=\"text\"\r\n            value={editingText}\r\n            onChange={contentOnChangeHandler}\r\n            ref={editTextRef}\r\n          />\r\n          <RiCheckLine\r\n            className=\"todo-edit__update icon\"\r\n            onClick={updateContentHandler}\r\n          />\r\n        </li>\r\n      ) : (\r\n        <li className=\"todo\">\r\n          <div className=\"todo__content\">{props.todo.content}</div>\r\n          <div className=\"todo__icons\">\r\n            <RiEdit2Line className=\"todo__edit icon\" onClick={editHandler} />\r\n            <RiDeleteBinLine\r\n              className=\"todo__delete icon\"\r\n              onClick={deleteHandler}\r\n            />\r\n            <input\r\n              className=\"todo__check icon\"\r\n              type=\"checkbox\"\r\n              checked={props.todo.completed}\r\n              onChange={checkHandler}\r\n            />\r\n          </div>\r\n        </li>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport Todo from \"./components/Todo\";\r\n\r\nfunction App() {\r\n  const [todoInput, setTodoInput] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  const todoInputRef = useRef();\r\n\r\n  useEffect(() => {\r\n    getFromLocal();\r\n    todoInputRef.current.focus();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    saveToLocal();\r\n    filterTodos();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [todos, filterStatus]);\r\n\r\n  const todoInputChangeHandler = (e) => {\r\n    setTodoInput(e.target.value);\r\n  };\r\n\r\n  const addTodoHandler = (e) => {\r\n    e.preventDefault();\r\n    setTodos((prevTodos) => [\r\n      ...prevTodos,\r\n      { id: new Date().getTime(), content: todoInput, completed: false },\r\n    ]);\r\n    setTodoInput(\"\");\r\n    todoInputRef.current.focus();\r\n  };\r\n\r\n  const changeFilterStatusHandler = (e) => {\r\n    setFilterStatus(e.target.value);\r\n  };\r\n\r\n  const filterTodos = () => {\r\n    if (filterStatus === \"all\") {\r\n      setFilteredTodos(todos);\r\n    } else if (filterStatus === \"completed\") {\r\n      setFilteredTodos(todos.filter((todo) => todo.completed));\r\n    } else if (filterStatus === \"uncompleted\") {\r\n      setFilteredTodos(todos.filter((todo) => !todo.completed));\r\n    } else {\r\n      console.log(\"Error from filter todos!\");\r\n    }\r\n  };\r\n\r\n  const saveToLocal = () => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  };\r\n\r\n  const getFromLocal = () => {\r\n    if (localStorage.getItem(\"todos\") === null) {\r\n      localStorage.setItem(\"todos\", JSON.stringify([]));\r\n    } else {\r\n      setTodos(JSON.parse(localStorage.getItem(\"todos\")));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-list-app\">\r\n      <h1 className=\"title\">Todo List</h1>\r\n      <div className=\"wrapper\">\r\n        <TodoForm\r\n          todoInputRef={todoInputRef}\r\n          todoInput={todoInput}\r\n          todoInputChangeHandler={todoInputChangeHandler}\r\n          addTodoHandler={addTodoHandler}\r\n          changeFilterStatusHandler={changeFilterStatusHandler}\r\n        />\r\n        <div className=\"todos-container\">\r\n          <ul className=\"todo-list\">\r\n            {filteredTodos.map((todo) => (\r\n              <Todo\r\n                key={todo.id}\r\n                todo={todo}\r\n                todos={todos}\r\n                setTodos={setTodos}\r\n                filterStatus={filterStatus}\r\n              />\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}