{"version":3,"sources":["components/TodoForm/index.js","components/Todo/index.js","App.js","index.js"],"names":["TodoForm","todoInput","todoInputRef","todoInputChangeHandler","addTodoHandler","changeFilterStatusHandler","className","type","placeholder","value","onChange","ref","onClick","memo","Todo","todo","checkTodoHandler","updateTodoContentHandler","deleteTodoHandler","useState","editing","setEditing","content","editingText","setEditingText","editTextRef","useRef","useEffect","current","focus","e","target","id","checked","completed","App","setTodoInput","todos","setTodos","filterStatus","setFilterStatus","filteredTodos","setFilteredTodos","localStorage","getItem","setItem","JSON","stringify","parse","newFilteredTodos","filter","console","log","filterTodos","useCallback","preventDefault","prevTodos","Date","getTime","todoId","newTodos","map","newContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c529cdc.chunk.js","sourcesContent":["import { memo } from \"react\";\n\nimport \"./todoForm.scss\";\n\nfunction TodoForm({ todoInput, todoInputRef, todoInputChangeHandler, addTodoHandler, changeFilterStatusHandler }) {\n  return (\n    <form className=\"todos__form\">\n      <input className=\"todos__input\" type=\"text\" placeholder=\"Add todo\" value={todoInput} onChange={todoInputChangeHandler} ref={todoInputRef} />\n      <button className=\"todos__add\" onClick={addTodoHandler}>\n        Add\n      </button>\n      <select className=\"todos__filter\" onChange={changeFilterStatusHandler}>\n        <option className=\"filter__option\" value=\"all\">\n          All\n        </option>\n        <option className=\"filter__option\" value=\"completed\">\n          Completed\n        </option>\n        <option className=\"filter__option\" value=\"uncompleted\">\n          Uncompleted\n        </option>\n      </select>\n    </form>\n  );\n}\n\nexport default memo(TodoForm);\n","import React, { useState, useEffect, useRef, memo } from \"react\";\nimport { RiCheckLine, RiDeleteBinLine, RiEdit2Line } from \"react-icons/ri\";\n\nimport \"./todo.scss\";\n\nfunction Todo({ todo, checkTodoHandler, updateTodoContentHandler, deleteTodoHandler }) {\n  const [editing, setEditing] = useState(false);\n  const [editingText, setEditingText] = useState(todo.content);\n\n  const editTextRef = useRef();\n\n  useEffect(() => {\n    if (editTextRef.current) {\n      editTextRef.current.focus();\n    }\n  }, [editing]);\n\n  const checkHandler = () => {\n    checkTodoHandler(todo.id);\n  };\n\n  const editHandler = () => {\n    setEditing(true);\n  };\n\n  const contentOnChangeHandler = (e) => {\n    setEditingText(e.target.value);\n  };\n\n  const updateContentHandler = () => {\n    updateTodoContentHandler(todo.id, editingText);\n    setEditing(false);\n  };\n\n  const deleteHandler = () => {\n    deleteTodoHandler(todo.id);\n  };\n\n  return (\n    <li className={`todo ${editing && \"todo-edit\"}`}>\n      {editing ? (\n        <>\n          <input className=\"todo-edit__content\" type=\"text\" value={editingText} onChange={contentOnChangeHandler} ref={editTextRef} />\n          <RiCheckLine className=\"todo-edit__update icon\" onClick={updateContentHandler} />\n        </>\n      ) : (\n        <>\n          <p className=\"todo__content\">{todo.content}</p>\n          <div className=\"todo__icons\">\n            <RiEdit2Line className=\"todo__edit icon\" onClick={editHandler} />\n            <RiDeleteBinLine className=\"todo__delete icon\" onClick={deleteHandler} />\n            <input className=\"todo__check icon\" type=\"checkbox\" checked={todo.completed} onChange={checkHandler} />\n          </div>\n        </>\n      )}\n    </li>\n  );\n}\n\nexport default memo(Todo);\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\n\nimport TodoForm from \"./components/TodoForm\";\nimport Todo from \"./components/Todo\";\n\nfunction App() {\n  const [todoInput, setTodoInput] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  const todoInputRef = useRef();\n\n  useEffect(() => {\n    const getFromLocal = () => {\n      if (localStorage.getItem(\"todos\") === null) {\n        localStorage.setItem(\"todos\", JSON.stringify([]));\n      } else {\n        setTodos(JSON.parse(localStorage.getItem(\"todos\")));\n      }\n    };\n\n    getFromLocal();\n    todoInputRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    const saveToLocal = () => {\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\n    };\n\n    const filterTodos = () => {\n      if (filterStatus === \"all\") {\n        setFilteredTodos(todos);\n      } else if (filterStatus === \"completed\") {\n        const newFilteredTodos = todos.filter((todo) => todo.completed);\n        setFilteredTodos(newFilteredTodos);\n      } else if (filterStatus === \"uncompleted\") {\n        const newFilteredTodos = todos.filter((todo) => !todo.completed);\n        setFilteredTodos(newFilteredTodos);\n      } else {\n        console.log(\"Error from filter todos!\");\n      }\n    };\n\n    saveToLocal();\n    filterTodos();\n  }, [todos, filterStatus]);\n\n  // Form functions\n  const todoInputChangeHandler = useCallback((e) => {\n    setTodoInput(e.target.value);\n  }, []);\n\n  const addTodoHandler = useCallback(\n    (e) => {\n      e.preventDefault();\n      setTodos((prevTodos) => [...prevTodos, { id: new Date().getTime(), content: todoInput, completed: false }]);\n      setTodoInput(\"\");\n      todoInputRef.current.focus();\n    },\n    [todoInput]\n  );\n\n  const changeFilterStatusHandler = useCallback((e) => {\n    setFilterStatus(e.target.value);\n  }, []);\n\n  // Todo functions\n  const checkTodoHandler = useCallback(\n    (todoId) => {\n      const newTodos = todos.map((todo) => {\n        if (todoId === todo.id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      setTodos(newTodos);\n    },\n    [todos]\n  );\n\n  const updateTodoContentHandler = useCallback(\n    (todoId, newContent) => {\n      const newTodos = todos.map((todo) => {\n        if (todoId === todo.id) {\n          todo.content = newContent;\n        }\n        return todo;\n      });\n      setTodos(newTodos);\n    },\n    [todos]\n  );\n\n  const deleteTodoHandler = useCallback(\n    (todoId) => {\n      const newTodos = todos.filter((todo) => todoId !== todo.id);\n      setTodos(newTodos);\n    },\n    [todos]\n  );\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Todo List</h1>\n      <div className=\"wrapper\">\n        <TodoForm\n          todoInputRef={todoInputRef}\n          todoInput={todoInput}\n          todoInputChangeHandler={todoInputChangeHandler}\n          addTodoHandler={addTodoHandler}\n          changeFilterStatusHandler={changeFilterStatusHandler}\n        />\n        <ul className=\"todos__list\">\n          {filteredTodos.map((todo) => (\n            <Todo\n              key={todo.id}\n              todo={todo}\n              checkTodoHandler={checkTodoHandler}\n              updateTodoContentHandler={updateTodoContentHandler}\n              deleteTodoHandler={deleteTodoHandler}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./styles/_global.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}